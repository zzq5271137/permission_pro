<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mycomp.mapper.EmployeeMapper">

    <resultMap id="BaseResultMap" type="com.mycomp.domain.Employee">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="inputtime" jdbcType="TIMESTAMP" property="inputtime"/>
        <result column="tel" jdbcType="VARCHAR" property="tel"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="state" jdbcType="BIT" property="state"/>
        <result column="admin" jdbcType="BIT" property="admin"/>

        <association property="department" javaType="com.mycomp.domain.Department"
                     columnPrefix="d_">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
        </association>

        <collection property="roles" ofType="com.mycomp.domain.Role" javaType="List"
                    select="com.mycomp.mapper.RoleMapper.selectRolesByEmployeeId" column="id"/>
    </resultMap>

    <!-- 搜索查询的sql片段 -->
    <sql id="where_sql">
        <where>
            <if test="keyword != null and keyword != ''">
                and e.username like concat('%', #{keyword}, '%')
                or e.tel like concat('%', #{keyword}, '%')
                or e.email like concat('%', #{keyword}, '%')
            </if>
        </where>
    </sql>

    <select id="selectAll" resultMap="BaseResultMap">
        select
        e.id,
        e.username,
        e.password,
        e.inputtime,
        e.tel,
        e.email,
        e.state,
        e.admin,
        d.id as d_id,
        d.name as d_name
        from employee as e
        left join department d on e.dep_id = d.id
        <include refid="where_sql"/>
        order by e.id
    </select>

    <insert id="insert" parameterType="com.mycomp.domain.Employee"
            useGeneratedKeys="true" keyProperty="id">
        insert into employee (id, username, password, inputtime,
                              tel, email, state, admin,
                              dep_id)
        values (#{id}, #{username}, #{password}, #{inputtime},
                #{tel}, #{email}, #{state}, #{admin},
                #{department.id})
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.mycomp.domain.Employee">
        update employee
        set username  = #{username},
            password  = #{password},
            inputtime = #{inputtime},
            tel       = #{tel},
            email     = #{email},
            state     = #{state},
            admin     = #{admin},
            dep_id    = #{department.id}
        where id = #{id}
    </update>

    <update id="softDeleteByPrimaryKey">
        update employee
        set state = false
        where id = #{id}
    </update>

    <insert id="insertEmployeeRoleRel">
        insert into employee_role_rel (eid, rid)
        values (#{eid}, #{rid})
    </insert>

    <delete id="deleteEmployeeRoleRel">
        delete
        from employee_role_rel
        where eid = #{id}
    </delete>

    <select id="getEmployeeByUsername" resultType="com.mycomp.domain.Employee">
        select *
        from employee
        where username = #{username}
    </select>

    <select id="getRolesByEmployeeId" resultType="String">
        select r.rnum
        from employee_role_rel as err
                 left join role r on err.rid = r.rid
        where eid = #{id}
    </select>

    <select id="getPermissionsByEmployeeId" resultType="String">
        select distinct p.presource
        from role_permission_rel as rpr
                 left join permission p on rpr.pid = p.pid
        where rid in (select rid from employee_role_rel where eid = #{id})
    </select>

</mapper>